import random

def randomCreation(n):
    dizi=[]
    for i in range(n):
        dizi.append(random.randint(0,100))
    return dizi

def insertionSort(numbers):
    karsilastirma_sayisi=0   #comparison
    swap_sayisi=0
    for i in range(1,len(numbers)):
        for j in range(i,0,-1):
            karsilastirma_sayisi += 1
            if(numbers[j] < numbers[j-1]):
                #swap
                swap_sayisi += 1
                temp=numbers[j-1]
                numbers[j-1]=numbers[j]
                numbers[j]=temp
    return karsilastirma_sayisi,swap_sayisi

def bubbleSort(arr):
    n=len(arr)

    karsilastirma_sayisi=0
    swap_sayisi=0

    #traverse through all array elements (tüm dizi öğelerinde dolaş)
    for i in range(n):

        #son eleman zaten yerinde
        for j in range(0,n-i-1):
            karsilastirma_sayisi += 1
            #diziyi 0 dan n-i-1 e getirin
            #bulunan öğeler daha büyükse takas
            #sonraki unsurlardan daha(than next elements)
            if(arr[j] > arr[j+1]):
               swap_sayisi += 1
               arr[j],arr[j+1]=arr[j+1],arr[j]
    return swap_sayisi



#verilen veya belirlenen diziyi ikiye böl.aynı indis elemanlarını karşılaştır.
#küçükten büyüğe yaz.sonra sıralanmadıysa dizi bu sefer 3 gruba böl.
#yine aynı indis elemanlarını karşılaştır ve sırala.
#en son da sıralanmadıysa insertionsort yap ve dizi sıralanmış şkl tamamlanır.
def shellSort(arr):
    n=len(arr)
    gap=n//2  #tamsayi olarak alması için // kullanılıyor
    karsilastirmaSayisi=0
    swapSayisi=0
    while(gap>0):
        for i in range(gap,n):
            karsilastirmaSayisi += 1
            temp=arr[i]
            j=i
            while(j>=gap and arr[j-gap]>temp):
                karsilastirmaSayisi += 1
                swapSayisi += 1
                arr[j]=arr[j-gap]
                j -= gap
            arr[j]=temp
        gap //= 2
    return arr,karsilastirmaSayisi,swapSayisi


arr=randomCreation(100)
print(shellSort(arr))
print(insertionSort(arr))
print(bubbleSort(arr))

